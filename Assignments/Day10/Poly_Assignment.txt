Static Polymorphism – Flight Search System
 
Problem Statement:
Implement static polymorphism using default arguments or variable-length arguments in a method called search_flights().
 
Requirements:
 
Create a class FlightSearch
 
Implement search_flights() using:
 
Default arguments
 
Variable-length arguments (*args)
 
Search by:
 
Only airline
 
Airline + destination
 
Airline + destination + date
 
Hint: Python doesn’t support true method overloading, so simulate it via default/optional/*args.
 
class FlightSearch:
    def search_flights(self, airline=None, destination=None, date=None):
        if airline and destination and date:
            print(f"Searching flights by {airline}, to {destination} on {date}")
        elif airline and destination:
            print(f"Searching flights by {airline}, to {destination}")
        elif airline:
            print(f"Searching flights by {airline}")
        else:
            print("Showing all available flights")
 
Q7. Dynamic Polymorphism – Check-in System
 
Problem Statement:
Model a check-in system where each passenger type (e.g., Economy, Business) has a different check-in process.
 
Requirements:
 
Create a base class CheckIn
 
Override the check_in_process() method in subclasses EconomyPassenger and BusinessPassenger
 
class CheckIn:
    def check_in_process(self):
        print("General check-in procedure")
 
class EconomyPassenger(CheckIn):
    def check_in_process(self):
        print("Economy check-in: Self-service kiosk")
 
class BusinessPassenger(CheckIn):
    def check_in_process(self):
        print("Business check-in: Priority desk")
 
Q8. Dynamic Polymorphism – Notification System
 
Problem Statement:
Model a notification system that behaves differently based on communication type (Email, SMS, App Notification).
 
Requirements:
 
Base class: Notification
 
Subclasses: EmailNotification, SMSNotification, AppNotification
 
Override send() method in each subclass
 
Q9. Static Polymorphism – Cargo Calculation System
 
Problem Statement:
Create a method to calculate total cargo weight using static polymorphism.
 
Requirements:
 
Use method with variable-length arguments (*args)
 
Sum total cargo weight for a given list of items
 
class Cargo:
    def calculate_weight(self, *weights):
        total = sum(weights)
        print(f"Total cargo weight: {total} kg")
 
Q10. Dynamic Polymorphism – Aircraft Maintenance Logs
 
Problem Statement:
Maintain aircraft logs with different levels of detail. Use dynamic polymorphism to customize log formats.
 
Requirements:
 
Base class: MaintenanceLog
 
Subclasses: BasicLog, DetailedLog
 
Override method display_log() in each subclass